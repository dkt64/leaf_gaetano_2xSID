//====================================================================
// Leaf - 2xSID by Gaetano
// Code by DKT/Samar
//====================================================================

#import "inc/makra.asm"

//====================================================================
// Sta≈Çe
//====================================================================

.const	IRQ1_LINE		= $fa
.const 	MUSIC		= $1000

//====================================================================
// Zeropage
//====================================================================

.const	IRQ_ZP		= $02	// zajmuje 4

//====================================================================
// Basic i start programu
//====================================================================

	BasicUpstart2(start)

start:	
	sei
	lda #$35
	sta $01

	lda #0
	jsr $1000

	jsr multiply_table_generator

	lda $dc0d
	lda $dd0d
	lda #$7f
	sta $dc0d
	sta $dd0d
	lda #$01
	sta $d01a
	asl $d019
	lda #$1b
	sta $d011
	IrqSetup(IRQ1_LINE, irq1)
	cli
lp:
	jsr main_loop

	jmp lp

//====================================================================
// irq
//====================================================================

irq1:
	IrqEntry(IRQ_ZP)

	ldx #5
	dex
	bne *-1
	inc $d020
	jsr $1003
	dec $d020

	IrqExit(IRQ_ZP)


//====================================================================
// Muza
//====================================================================

	* = MUSIC
	.import binary "data/tune.prg",2

//====================================================================
// Libs
//====================================================================

T1: 		.word 0
T2: 		.word 0
PRODUCT: 		.dword 0
T32_1: 		.dword 0
T32_2: 		.dword 0
PRODUCT32: 	.dword 0

#import "inc/math.asm"

//====================================================================
// main_loop
// .const 	T32_1 		= $18 // 32-bit input
// .const 	T32_2 		= $1c // 32-bit input
// .const 	PRODUCT32 	= $20 // 32-bit result
//====================================================================

main_loop:

	Sync()
	dec $d020

	lda par1+0
	sta T32_1+0
	lda par1+1
	sta T32_1+1
	lda par1+2
	sta T32_1+2
	lda par1+3
	sta T32_1+3

	lda par2+0
	sta T32_2+0
	lda par2+1
	sta T32_2+1
	lda par2+2
	sta T32_2+2
	lda par2+3
	sta T32_2+3

	jsr multiply_32bit_unsigned

	inc $d020
	rts

par1:	.dword $00026fed
par2: 	.dword $00000efe

//====================================================================
code_end:
//====================================================================
